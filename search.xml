<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo的Next主题下文章标题的评论数显示问题</title>
    <url>/2020/12/21/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E7%9A%84%E8%AF%84%E8%AE%BA%E6%95%B0%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>  在hexo的next主题下，使用了valine评论系统后，会自动地在文章的标题下显示出这篇文章的评论数。<br>  <a id="more"></a><br>  但文字默认的是使用”valine: “,如下图显示：</p>
<p>  <a href="https://imgchr.com/i/rcuhnA"><img src="https://s3.ax1x.com/2020/12/23/rcuhnA.png" alt="rcuhnA.png"></a></p>
<p>  不同于不蒜子计数器的修改方式，也就是在themes\next\layout_third-party\statistics下的<br>  busuanzi-counter.swig中在<span>标签前添加汉字。在themes\next\layout_macro下的有关valine的标签处修改是无效的。</p>
<p>  经过测试后需要在themes\next\languages目录下的zn-CH.yml配置文件中进行修改。</p>
<p>  具体是在下图中添加如下内容：</p>
<p>  <a href="https://imgchr.com/i/rcuWXd"><img src="https://s3.ax1x.com/2020/12/23/rcuWXd.png" alt="rcuWXd.png"></a></p>
<p>  修改完成后的效果图如下：</p>
<p>  <a href="https://imgchr.com/i/rcu40I"><img src="https://s3.ax1x.com/2020/12/23/rcu40I.png" alt="rcu40I.png"></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java变参方法笔记</title>
    <url>/2020/12/23/Java%E5%8F%98%E5%8F%82%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一：变参方法"><a href="#一：变参方法" class="headerlink" title="一：变参方法"></a>一：变参方法</h2><p>首先，变参方法指的是可以接受任意数量参数的方法。</p>
<a id="more"></a>
<p>在定义时，他的表达形式如下：</p>
<p><code>public findMax(int... nums);</code></p>
<p>其中<code>int</code>后的“<code>...</code>”是代码的一部分，这样定义之后，该方法就可以接受任意个int型整数作为其参数。<br>可变参数只有一个，且一定在方法参数的末尾处。</p>
<p>而“<code>int...</code>”的实质是 <code>int[]</code> ，也就是<code>int</code>类型的数组，里面的每一个元素就是传入的参数，<br>从<code>int...</code>到<code>int[]</code>的过程是由编译器执行的。</p>
<h2 id="二：一些问题"><a href="#二：一些问题" class="headerlink" title="二：一些问题"></a>二：一些问题</h2><h3 id="1-当一个类中重载了两个方法如下所示："><a href="#1-当一个类中重载了两个方法如下所示：" class="headerlink" title="1. 当一个类中重载了两个方法如下所示："></a>1. 当一个类中重载了两个方法如下所示：</h3><p><code>public setParam(int x);</code><br><code>public setParam(int... x);</code></p>
<p>其中一个方法只接受一个<code>int</code>类型整数，而另一个方法接受<code>int</code>类型的可变参数.<br>这时如果调用该方法并传入一个整数a，哪个方法会被执行呢？<br>实际运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span>... items)</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> item1,<span class="keyword">int</span> item2)</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Demo vp = <span class="keyword">new</span> Demo();  </span><br><span class="line">        vp.comp(<span class="number">1</span>, <span class="number">2</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>从上图可以看到，仅接收一个整数作为参数的方法会优先与变参方法执行。</p>
<h3 id="2-能否定义两个重载方法，其中一个接受int数组，而另一个方法接受int类型可变参数？"><a href="#2-能否定义两个重载方法，其中一个接受int数组，而另一个方法接受int类型可变参数？" class="headerlink" title="2. 能否定义两个重载方法，其中一个接受int数组，而另一个方法接受int类型可变参数？"></a>2. 能否定义两个重载方法，其中一个接受int数组，而另一个方法接受int类型可变参数？</h3><p>即，能否在一个类中定义如下两个方法：</p>
<p><code>public setParam(int[] x);</code><br><code>public setParam(int... x);</code></p>
<p>实际结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>... params)</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="number">1</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] params)</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="number">2</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编译报错</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>在编写过程中，IDE就会提示错误信息，这是因为<code>int..</code>的实质就是<code>int</code>类型数组，只不过数组中存放的时传入的参数。<br>因此这两个方法本质是一样的，这就会造成编译错误。</p>
<h3 id="3-既然可变参数的本质是对应数据类型的数组，那么是否可以直接传入这样一个数组呢？"><a href="#3-既然可变参数的本质是对应数据类型的数组，那么是否可以直接传入这样一个数组呢？" class="headerlink" title="3. 既然可变参数的本质是对应数据类型的数组，那么是否可以直接传入这样一个数组呢？"></a>3. 既然可变参数的本质是对应数据类型的数组，那么是否可以直接传入这样一个数组呢？</h3><p>下图为实际结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>... params)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;params.length;i++)&#123;</span><br><span class="line">            System.out.println(params[i]);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Demo demo = <span class="keyword">new</span> Demo();  </span><br><span class="line">        demo.print(<span class="number">1</span>, <span class="number">2</span>);  </span><br><span class="line">        demo.print(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>可以看出，可变参数确实可以接受直接传入的数组，因为他们本质上是相同的，<br>只不过编译器会把传入的参数转换为数组形式。<br>实际上，通过这个问题，可以引申出一个小技巧，那就是对原本最后一个参数是数组的方法，完全可以<br>直接将其改造为可变参数，这样也不会破坏原有的代码。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
